<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="Globals.t4" #>
using System;
using System.Threading.Tasks;

namespace Rsam70.Concurrency.Schedulers
{
    /// <summary>
    /// Defines the schedule interface for functions that return a Task
    /// or a Task<Task>
    /// </summary
    public interface ISchedulerVoid
    {     
        #region Scheduled action generation returning result Task
<#
// actions generation
List<char> templates = new List<char>();
List<string> parameters = new List<string>();

for (char c = beginTemplateChar; c<lastTemplateChar; c++)
{
 if (templates.Count==0)
    {
#>
        Task Schedule(Action action);
<#
    }

    templates.Add(c);
    parameters.Add($"{c} {Char.ToLower(c)}");

    var strTemplates = string.Join(",", templates);
    var strParams = strTemplates.ToLower();
    var strParamsDecl = string.Join(",", parameters);
#>
        Task Schedule<<#= strTemplates #>>(Action<<#= strTemplates #>> action,<#= strParamsDecl #>);
<#
}
#>
        #endregion Scheduled action generation returning result Task

        #region Scheduled function generation returning result Task<Task>
        /// Function returning a Task
        Task Schedule(Func<Task> func);
<#
templates.Clear();
parameters.Clear();

for (char c = beginTemplateChar; c<lastTemplateChar; c++)
{
    templates.Add(c);
    parameters.Add($"{c} {Char.ToLower(c)}");

    var strTemplates = string.Join(",", templates);
    var strParams = strTemplates.ToLower();    
    var strParamsDecl = string.Join(",", parameters);
#>
        Task Schedule<<#= strTemplates #>>(Func<<#= strTemplates #>,Task> func,<#= strParamsDecl #>);
<#
}
#>
        #endregion /// Scheduled function generation returning result Task
    }
}
